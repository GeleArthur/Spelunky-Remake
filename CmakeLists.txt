cmake_minimum_required(VERSION 3.21)
project(spelunky)

include("$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake")

add_executable(Spelunky 
    src/BaseGame.cpp
    src/BaseGame.h
    src/Matrix2x3.cpp
    src/Matrix2x3.h
    src/SoundEffect.cpp
    src/SoundEffect.h
    src/SoundStream.cpp
    src/SoundStream.h
    src/structs.cpp
    src/structs.h
    src/SVGParser.cpp
    src/SVGParser.h
    src/Texture.cpp
    src/Texture.h
    src/Transform.h
    src/utils.h
    src/utils.cpp
    src/Vector2f.h
    src/Vector2f.cpp



    src/Bat.h
    src/Bat.cpp
    src/Bomb.h
    src/Bomb.cpp
    src/CameraSystem.h
    src/CameraSystem.cpp
    src/Cave.h
    src/Cave.cpp
    src/Damsel.h
    src/Damsel.cpp    
    src/EnemyEntity.h
    src/EnemyEntity.cpp
    src/Entity.h
    src/Entity.cpp
    src/EntityManager.h
    src/EntityManager.cpp
    src/EntityPickupRectCollider.h
    src/EntityPickupRectCollider.cpp
    src/EntityTypes.h
    src/Game.h
    src/Game.cpp
    src/GizmosDrawer.h
    src/GizmosDrawer.cpp
    src/HitType.h
    src/InputManager.h
    src/InputManager.cpp
    src/magic_enum.hpp
    src/main.cpp
    src/Matrix.h
    src/Matrix.cpp
    src/PathTypes.h
    src/PlayerObject.h
    src/PlayerObject.cpp
    src/PlayerState.h
    src/RectPhysicsCollider.h
    src/RectPhysicsCollider.cpp
    src/Rock.h
    src/Rock.cpp
    src/RoomTemplates.h
    src/RoomTemplates.cpp
    src/Snake.h
    src/Snake.cpp
    src/SoundEffectTypes.h
    src/SoundManager.h
    src/SoundManager.cpp
    src/SpriteSheetManager.h
    src/SpriteSheetManager.cpp
    src/Tile.h
    src/Tile.cpp
    src/TileTypes.h
    src/UIManager.h
    src/UIManager.cpp
    src/UIManager.cpp
    src/Vector2i.h
    src/Vector2i.cpp
    src/WorldManager.h
    src/WorldManager.cpp
)

find_package(SDL2 CONFIG REQUIRED)
find_package(SDL2_image CONFIG REQUIRED)
find_package(SDL2_mixer CONFIG REQUIRED)
find_package(SDL2_ttf CONFIG REQUIRED)
find_package(OpenGL REQUIRED COMPONENTS OpenGL)

target_link_libraries(Spelunky PUBLIC $<TARGET_NAME_IF_EXISTS:SDL2::SDL2main> $<IF:$<TARGET_EXISTS:SDL2::SDL2>,SDL2::SDL2,SDL2::SDL2-static>)
target_link_libraries(Spelunky PUBLIC $<IF:$<TARGET_EXISTS:SDL2_image::SDL2_image>,SDL2_image::SDL2_image,SDL2_image::SDL2_image-static>)
target_link_libraries(Spelunky PUBLIC $<IF:$<TARGET_EXISTS:SDL2_ttf::SDL2_ttf>,SDL2_ttf::SDL2_ttf,SDL2_ttf::SDL2_ttf-static>)
target_link_libraries(Spelunky PUBLIC $<IF:$<TARGET_EXISTS:SDL2_mixer::SDL2_mixer>,SDL2_mixer::SDL2_mixer,SDL2_mixer::SDL2_mixer-static>)
target_link_libraries(Spelunky PUBLIC ${OPENGL_LIBRARIES})


if(EMSCRIPTEN)
    set_target_properties(Spelunky PROPERTIES SUFFIX ".html")

    target_compile_options(Spelunky PRIVATE -sUSE_SDL=2 -sLEGACY_GL_EMULATION -sGL_UNSAFE_OPTS=0 )
    target_link_options(Spelunky PRIVATE 
    --preload-file "${CMAKE_CURRENT_SOURCE_DIR}/Resources"
    # -sALLOW_MEMORY_GROWTH
    # -sASYNCIFY
    -sUSE_SDL=2 -sLEGACY_GL_EMULATION -sGL_UNSAFE_OPTS=0
    )
endif()


target_compile_features(Spelunky PRIVATE cxx_std_17)

add_custom_command(TARGET Spelunky POST_BUILD
                    COMMAND ${CMAKE_COMMAND} -E copy_directory
                    "${PROJECT_SOURCE_DIR}/Resources"
                    $<TARGET_FILE_DIR:Spelunky>
)
