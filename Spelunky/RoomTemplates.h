#pragma once
#include <unordered_map>
#include <vector>
#include "PathTypes.h"

namespace RoomTemplates
{
    const std::vector<std::string> g_EntranceLeftRight{
        "0000600000000000000000000000000000000000008000000000000000000000000001111111111",
        "1111111112222222222000000000000000000000008000000000000000000000000001111111111",
        "0000000000008000000000000000000L000000000P111111000L111111000L00111111111111111",
        "000000000008000000000000000000000000L000111111P000111111L001111100L001111111111"
    };
    const std::vector<std::string> ENTRANCE_DOWN{
        "0000600000000000000000000000000000000000008000000000000000000000000002021111120",
        "1111111112222222222000000000000000000000008000000000000000000000000002021111120",
        "0000000000008000000000000000000L000000000P111111000L111111000L00011111111101111",
        "000000000008000000000000000000000000L000111111P000111111L001111000L001111011111"
    };
    const std::vector<std::string> EXIT{
        "0000000000000000000000000000000000000000008000000000000000000000000001111111111",
        "0000000000010021110001001111000110111129012000000111111111021111111201111111111",
        "0000000000111200100011110010021111011000000002109011111111102111111121111111111",
        // no drop
        "0000600000000000000000000000000000000000008000000000000000000000000001111111111",
        //"1111111112222222222000000000000000000000008000000000000000000000000001111111111", Has roof leave that out for now
    };
    const std::vector<std::string> LEFT_RIGHT{
        // basic rooms
        "0000600000000000000000000000000000000000050000000000000000000000000001111111111",
        "0000600000000000000000000000000000000005000050000000000000000000000001111111111",
        "0000600000000000000000000000000050000000000000000000000000011111111111111111111",
        "0000600000000000000000600000000000000000000000000000222220000111111001111111111",
        "1111111112222222222000000000000000000000050000000000000000000000000001111111111",
        "1111111112111111112022222222000000000000050000000000000000000000000001111111111",
        // low ceiling
        "1111111112111111112211111111221111111120111111110022222222000000000001111111111",
        // ladders
        "111111111000000000L111111111P000000000L5000050000000000000000000000001111111111",
        "111111111L000000000P111111111L0000000005000050000000000000000000000001111111111",
        "00000000000L0000L0000P1111P0000L0000L0000P1111P0000L1111L0000L1111L001111111111",
        // upper plats
        "0000000000111111110001111110000000000005000050000000000000000000000001111111111",
        "0000000000000000000000000000000000000000021111200021111112021111111121111111111",
        // treasure below
        "222222222000000000000000000L001111111P001050000L011000000L010000000L01111111111",
        "22222222200000000000L000000000P111111100L500000100L000000110L000000011111111111"
    };
    const std::vector<std::string> SIDE_ROOMS{
        // upper plats
        "0000000000010111100000000000000011010000050000000000000000000000000001111111111",
        // high walls
        "10000000040L600000011P000000011L000000011L5000000110000000011000000001111111111",
        "0000000110060000L040000000P110000000L110050000L11000000001100000000111111111111",
        "0000000110060000L040000000P110000000L110050000L11000000001100000000111111111111",
        "0000000110060000L040000000P110000000L110000000L11000000001100000000111112222111",
        "1111111110221111220002111120000022220000002222000002111120002211112201111111111",
        "1111111111112222111112000021111102201111120000211111022011111200002111112222111",
        "1111111110000000000110000001111222222111111111111112222221122000000221100000011",
        "21111112100L2112L0011P1111P1111L2112L1111L1111L1111L1221L1100L0000L001111221111",
    };
    const std::vector<std::string> TOP_OPEN{
        // basic rooms
        "0000000000000000000000000000000000000000050000000000000000000000000001111111111",
        "0000000000000000000000000000000000000005000050000000000000000000000001111111111",
        "0000000000000000000000000000050000500000000000000000000000011111111111111111111",
        "0000000000000000000000600000000000000000000000000000111110000111111001111111111",
        // upper plats
        "0000000000111111110001111110000000000005000050000000000000000000000001111111111",
        "0000000000000000000000000000000000000000021111200021111112021111111121111111111",
        "0000000011112002111111200211100000000000022222000111111111111111111111111111111",
        // treasure below
        "000000000000000000000000000L001111111P001050000L011000000L010000000L01111111111",
        "00000000000000000000L000000000P111111100L500000100L000000110L000000011111111111",
    };
    const std::vector<std::string> BOTTOM_TOP_OPEN{
        "0000000006000060000000000000000000000006000060000000000000000000000000000000000",
        "0000000006000060000000000000000000000000000050000000000000000000000001202111111",
        "0000000006000060000000000000000000000050000000000000000000000000000001111112021",
        "0000000006000060000000000000000000000000000000000000000000002200002201112002111",
        "0000000000000220000000000000000200002000112002110011100111012000000211111001111",
        "0000000000060000000000000000000000000000000000000001112220002100000001110111111",
        "0000000000060000000000000000000000000000000000000002221110000000001201111110111",
        "0000000000060000000000000000000000000000000000000002022020000100001001111001111",
    };
    const std::vector<std::string> BOTTOM_OPEN{
        "1111111112222222222000000000000000000000000000000000000000000000000001120000211",
        "1111111112222111111000002211100000002110000000000200000000000000000211120000211",
        "1111111111111112222111220000011200000000000000000000000000012000000001120000211",
        "1111111112111111112021111112000211112000002112000000022000002200002201111001111",
    };

    const std::vector<std::string> IDOLS{
        "2000000220000B0000000000000000000000000000000000000000000000000I000001111A01111",
    };
    const std::vector<std::string> ALTARS{
        "20000002200000000000000000000000000000000000000000000x0000002211112201111111111",
    };
    const std::unordered_map<PathTypes, std::vector<std::string>> PATH_TO_ROOM{
        {PathTypes::sideRoom, SIDE_ROOMS},
        // {PathTypes::leftRight, LEFT_RIGHT},
        // {PathTypes::entrance, ENTRANCE_DOWN},
        // {PathTypes::, ENTRANCE_DOWN},
    };

    const std::string* GetRandomString(const std::vector<std::string>& strings);
}
